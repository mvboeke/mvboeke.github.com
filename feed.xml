<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-02-20T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Design critiques are loaded with BS, and that’s OK</title>
    <link rel="alternate" href="/blog/2013/02/20/design-critiques-are-loaded-with-bs-and-thats-ok.html"/>
    <id>/blog/2013/02/20/design-critiques-are-loaded-with-bs-and-thats-ok.html</id>
    <published>2013-02-20T00:00:00Z</published>
    <updated>2013-02-20T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’m currently reading Jonathon Haidt’s &lt;a href='http://www.amazon.com/The-Righteous-Mind-Politics-ebook/dp/B0052FF7YM/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1361423547&amp;amp;sr=1-1&amp;amp;keywords=the+righteous+mind'&gt;&lt;em&gt;The Righteous Mind&lt;/em&gt;&lt;/a&gt;. It’s a book about morality and politics, but it is challenging some of my long-held conceptions about the design process, particularly critiques.&lt;/p&gt;

&lt;p&gt;In the first segment of the book, Haidt makes a compelling argument that judgement and justification are two separate processes. Judgment is immediate and intuitive, and whether we choose to believe it, justification comes only after we’ve made our intuitive response to something. As he states it succinctly Intuitions come first, strategic reasoning second.&lt;/p&gt;

&lt;p&gt;This has some pretty profound implications for design critique. No matter how much we try to rationally analyze whether a design solves a given problem, we are actually going to judge it first on an intuitive level. When we analyze it’s effectiveness, we will inevitably come up with reasons that justify our our initial intuitive reaction.&lt;/p&gt;

&lt;p&gt;I see a lot of this evident in the discourse surrounding flat vs. skeurmorphic design. I think a lot of designers are just tired of the detailed aesthetic that has dominated product and web design for so many years. They are eager to explore a new aesthetic and they justify the new trend as more honest to the medium, or more virtuous in its simplicity.&lt;/p&gt;

&lt;p&gt;As I first grappled with this notion, I was a bit disheartened. After all, I greatly value the dialogue inherent in design critique. I’ve always believed that if you involve the right people in critique, you end up with better design. As the first designer at a several startups, I often lamented how hard it was to do my best design work in isolation. Does the fact that critique is justification of foregone conclusions make it worthless? In other words, is critical analysis of design just a load of BS to support personal biases? Maybe so, but maybe that’s ok.&lt;/p&gt;

&lt;p&gt;Haidt points out that reasoning and justification serve an important purpose:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Intuitions come first and reasoning is usually produced after a judgment is made, in order to influence other people. But as a discussion progresses, the reasons given by other people sometimes change our intuitions and judgments.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, perhaps critical analysis is the mechanism by which good taste can spread between designers. Taste is ephemeral, subjective, and highly intuitive. It’s hard to teach or share an intuition, but through critique, we can use justification to influence others and maybe spread good taste.&lt;/p&gt;

&lt;p&gt;Of course, there is a danger here. The intuitions that spread most successfully may come from the most effective arguers, rather than the designers with the best taste. But there really isn’t another mechanism for sharing intuition, and if designers are cognizant of the pitfalls, we can apply an appropriate filter when accepting feedback from more or less persuasive personalities.&lt;/p&gt;

&lt;p&gt;I’d love to hear other designers thoughts and experiences with critique. Have you ever been caught without justification for your intuition? Has anyone ever changed your mind about one of your own designs?&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>How to get designers to make your open source project awesome</title>
    <link rel="alternate" href="/blog/2012/09/16/how-to-get-designers-to-make-your-open-source-project-awesome.html"/>
    <id>/blog/2012/09/16/how-to-get-designers-to-make-your-open-source-project-awesome.html</id>
    <published>2012-09-16T00:00:00Z</published>
    <updated>2012-09-16T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Like many designers, I use open source software, believe in the open source ethos, and would love to help make open source software look better and be easier to use. A lot of open-source projects are focused on the back-end, and don’t require a ton of UI/UX design, but it seems that there are more web apps popping up these days.&lt;/p&gt;

&lt;p&gt;I had the good fortune to get involved with the Brainiac project recently, and wanted to share some of the hurdles I faced as a designer getting involved in the project. If you can address these things on your open source project, you stand a much better chance of getting designers and front-end developers to contribute.&lt;/p&gt;

&lt;h3 id='make_it_easy_to_install'&gt;Make it easy to install&lt;/h3&gt;

&lt;p&gt;A lot of designers can hack CSS and HTML, and even work with layouts in various frameworks like Rails. However, to start working with those parts of your app, they have to get the entire thing to boot up locally. Make it easy, and offer step-by-step instructions. When I started working on Brainiac, I asked a developer “How do I get this running?”, to which he replied “oh, it’s a Leiningen app”. That didn’t mean anything to me, and left me feeling embarrassed about asking further questions. What I really needed was for him to lay out the handful of steps necessary to get the server running locally. I did get these for Brainiac, and then I added them to the project’s readme. Be a Pal&lt;/p&gt;

&lt;p&gt;If a designer takes an interest in your project, be a friend. Help them with technical issues. Figure out which dev tasks are blocking them. Great product companies have designers working side-by-side with developers to collaborate. When the designer or front-end dev gets stuck on something technical, they can call on a more-technical developer to help them get unstuck. I can see how this is tricky for highly distributed development projects, which brings me to the next point.&lt;/p&gt;

&lt;h3 id='keep_discussions_accessible'&gt;Keep Discussions Accessible&lt;/h3&gt;

&lt;p&gt;Use GitHub Issues for project discussions. This will keep discussions accessible to everyone, which is important, because designers need a channel for requesting features and posting comps. IRC WTF? That was my reaction after downloading the very cool Brackets project, and attempting to contribute. Their thorough installation instructions made it a breeze to install, but their project readme directed me to Freenode’s home page for Q&amp;amp;A. From there, I had no idea how to get onto the #brackets channel. Even though I’m aware that IRC is for chat, I wasn’t sure if I needed a client program or if it should work in my browser, and lost interest before I spent the time to figure it out. More explicit instructions for how to get going on the #brackets IRC channel would have helped here.&lt;/p&gt;

&lt;p&gt;Make sure your views don’t require a CS degree to edit&lt;/p&gt;

&lt;p&gt;Designers are getting more technical all the time, but you still need build your app in a way that takes designers into account. HTML, CSS, and (to a lesser extant) Javascript are the lingua franca of UI design. There’s certainly nothing wrong with working some SCSS into the mix, but when you start using using a lot of the backend programming language (i.e. Ruby/Java/Clojure) in your views, you’re turning a markup exercise into a programming excercise. You’ll lose a huge chunk of potential contributors, right out of the gates. Even the ones who soldier on and try to learn the language will find themselves stuck often. If they don’t have a pal (see above) they are likely to give up.&lt;/p&gt;

&lt;p&gt;Wrapping up&lt;/p&gt;

&lt;p&gt;My first foray into open source software development has been tremendously gratifying. Despite a hitting a few roadblocks, I’ve learned a ton, and have helped a great new product enter the world. I’m looking forward to continuing my involvement with Brainiac, as well as finding new projects to work on.&lt;/p&gt;

&lt;p&gt;I’m interested in hearing from anyone who knows of projects that have done a good job engaging with designers, and I would love to hear from other designers who have waded into the open source world. Please comment below, or find me at michael@michaelboeke.com or @mvboeke.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>UI Anti-patterns: mixing status and action</title>
    <link rel="alternate" href="/blog/2012/07/31/ui-anti-patterns-mixing-status-and-action.html"/>
    <id>/blog/2012/07/31/ui-anti-patterns-mixing-status-and-action.html</id>
    <published>2012-07-31T00:00:00Z</published>
    <updated>2012-07-31T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;One of the things I’d like to explore on this blog are some of the common UI anti-patterns I see while designing software.&lt;/p&gt;

&lt;p&gt;For example take a look at this picture from the very cool Jukebox 2 open source project. At a glance, it looks like most of the accounts are disabled.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Users' src='/images/blog/users.png' /&gt;&lt;/p&gt;

&lt;p&gt;Surprise! The reverse is actually true. The problem is that the UI control for disabling an account seems to be displaying its state. This is totally confusing for the viewer, because it’s actually showing the state the account will be in once the users clicks the button.&lt;/p&gt;

&lt;p&gt;I’m not trying to pick on the folks who contributed to Jukebox 2, as I’ve seen this same anti-pattern pop up on almost every project I’ve worked on that features tables with actions. The consequences for the user can be pretty drastic - in one instance when this anti-pattern was used for setting access permissions on a site with sensitive personal information, a user freaked out and locked everyone out of the site.&lt;/p&gt;

&lt;p&gt;So what’s the better way to handle this? Much of the time, the action is a binary flag, so an On/Off switch is a natural metaphor. It can convey current state explicitly without the need to even display the action, since its implied by the very nature of the switch. The above example might look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt='Switches' src='/images/blog/switches.png' /&gt;&lt;/p&gt;

&lt;p&gt;That’s better, but we could help the viewer to better understand which users are enabled at a glance. In order to avoid confusion, we’ll use some styling on the row to signify a disabled user with gray text and a desaturated avatar photo.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Disabled users' src='/images/blog/disabled_users.png' /&gt;&lt;/p&gt;

&lt;p&gt;That’s a big improvement in usability, without a lot of development work. The next time you find yourself adding and “Actions” column to a table, do your users a favor and give this a try.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Design is Life or Death</title>
    <link rel="alternate" href="/blog/2012/06/13/design-is-life-or-death.html"/>
    <id>/blog/2012/06/13/design-is-life-or-death.html</id>
    <published>2012-06-13T00:00:00Z</published>
    <updated>2012-06-13T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;As I was out running the other day, I saw a sandwich board propped up in the middle of the road that read “Car Wash for Food Pantry”. The message was written in large, outlined, bubble letters, and I squinted to read it from just a couple of car-lengths away.&lt;/p&gt;

&lt;p&gt;My design instinct immediately kicked in, as I determined that none of the cars on the road could read this sign in time to make a decision about whether to stop at the car wash. It was obvious that they should fill in the bubble letters, and make them much darker. I next realized that this bad design decision was probably impacting how much money they would raise, and given the cause, it might mean that some family would go hungry.&lt;/p&gt;

&lt;p&gt;Design is not about making something look good. Design drives behavior - it can secure an advantage for your business or put food in the mouth of a hungry child. The design of the world around us shapes the events of our lives, and can even make the difference between life or death.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Contemplation, Analysis and Kool-Aid</title>
    <link rel="alternate" href="/blog/2012/04/30/contemplation-analysis-and-kool-aid.html"/>
    <id>/blog/2012/04/30/contemplation-analysis-and-kool-aid.html</id>
    <published>2012-04-30T00:00:00Z</published>
    <updated>2012-04-30T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This site is a public forum for me to contemplate design, analyze product management, and drink delicious startup Kool Aid. This first post is mostly a stand-in, while I get familiar with Middleman&amp;#8217;s template tools. At least it’s a bit more engaging than lorem ipsum (if only a bit).&lt;/p&gt;</content>
  </entry>
</feed>
